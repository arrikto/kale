def {{ step_name }}({{ function_args }}):
    from kale.utils import pod_utils as _kale_pod_utils
    from kale.utils.jupyter_utils import run_code as _kale_run_code

    {% if auto_snapshot -%}
    _kale_pod_utils.snapshot_pipeline_step(
        "{{ pipeline_name }}",
        "{{ step_name }}",
        "{{ nb_path }}")
    {% endif %}

{%- if in_variables|length > 0 -%}
    data_loading_block = '''
    import os
    import shutil
    from kale.marshal import resource_save as _kale_resource_save
    from kale.marshal import resource_load as _kale_resource_load

    _kale_data_directory = "{{ marshal_path }}"
    {#- Verify directory exists #}
    if not os.path.isdir(_kale_data_directory):
        os.makedirs(_kale_data_directory, exist_ok=True)

    # -----------------------DATA LOADING START--------------------------------
    _kale_directory_file_names = [
        os.path.splitext(f)[0]
        for f in os.listdir(_kale_data_directory)
        if os.path.isfile(os.path.join(_kale_data_directory, f))
    ]

{%- for in_var in in_variables -%}
    {#- First check that the variable exists in the path #}
    if "{{ in_var }}" not in _kale_directory_file_names:
        raise ValueError("{{ in_var }}" + " does not exists in directory")

    {#- Load variable #}
    _kale_load_file_name = [
        f
        for f in os.listdir(_kale_data_directory)
        if (os.path.isfile(os.path.join(_kale_data_directory, f)) and
            os.path.splitext(f)[0] == "{{ in_var }}")
    ]
    if len(_kale_load_file_name) > 1:
        raise ValueError("Found multiple files with name %s: %s"
                         % ("{{ in_var }}", str(_kale_load_file_name)))
    _kale_load_file_name = _kale_load_file_name[0]
    {{ in_var }} = _kale_resource_load(
        os.path.join(_kale_data_directory, _kale_load_file_name))
{%- endfor %}
    # -----------------------DATA LOADING END----------------------------------
    '''
{%- else -%}
    data_loading_block = ''
{%- endif %}

{% for block in function_body %}
    block{{ loop.index }} = '''
{{block|indent(4, True)}}
    '''
{% endfor %}
{% if out_variables|length > 0 %}
    data_saving_block = '''
    # -----------------------DATA SAVING START---------------------------------
{%- for out_var in out_variables %}
    if "{{ out_var }}" in locals():
        {#-  `_kale_resource_save` will automatically add the correct extension #}
        _kale_resource_save(
            {{ out_var }}, os.path.join(_kale_data_directory, "{{ out_var }}"))
    else:
        print("_kale_resource_save: `{{ out_var }}` not found.")
{%- endfor %}
    # -----------------------DATA SAVING END-----------------------------------
    '''
{%- else %}
    data_saving_block = ''
{%- endif %}

    # run the code blocks inside a jupyter kernel
    blocks = (data_loading_block,
{%- for block in function_body %}
              block{{ loop.index }},
{%- endfor %}
              data_saving_block)
    _kale_run_code(blocks)
